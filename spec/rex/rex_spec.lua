describe("rex", function()
  local t, is, rex, re
  setup(function()
    t   = require 't'
    is  = t.is
    rex = t.rex
  end)
  it("meta", function()
    assert.truthy(is)
    assert.callable(rex)
    assert.callable(rex.mtname)
  end)
  it("new", function()
    assert.is_nil(rex())
    local p = '^__[\\w_]+\\s+[\\w_0-9]+$'
    re = rex(p)
    assert.same({p}, re)

    assert.equal(p, re[1])
    assert.equal(p, re.pattern)
    assert.equal('__[\\w_]+\\s+[\\w_0-9]+', re.patterns)

    assert.is_function(re.find)
    assert.is_function(re.tfind)
    assert.is_function(re.match)
    assert.is_function(re.gmatch)
    assert.is_function(re.gsub)
    assert.is_function(re.split)
    assert.is_function(re.count)

    assert.is_nil(rex.find)
    assert.is_nil(rex.tfind)
    assert.is_nil(rex.match)
    assert.is_nil(rex.gmatch)
    assert.is_nil(rex.gsub)
    assert.is_nil(rex.split)
    assert.is_nil(rex.count)

    assert.is_nil(rex.isnamed)
    assert.is_nil(rex.iswhole)
  end)
  describe('is', function()
    it('indexed', function()
      assert.is_true(rex('(.)').isindexed)
      assert.is_true(rex('^((?<first>__[\\w_]+)\\s*(?<last>[a-z0-9]+)?)').isindexed)
      assert.is_true(rex('^(?<first>__[\\w_]+)\\s*([a-z0-9]+)?').isindexed)
      assert.is_true(rex('^(__[\\w_]+)\\s*(?<last>[a-z0-9]+)?)').isindexed)

      assert.is_nil(rex('\\(.)').isindexed)
      assert.is_nil(rex('^__[\\w_]+\\s*(?<last>[a-z0-9]+)?)').isindexed)
      assert.is_nil(rex('(?<first>__[\\w_]+)').isindexed)
      assert.is_nil(rex('^(?<first>__[\\w_]+)\\s*(?<last>[a-z0-9]+)?').isindexed)
      assert.is_nil(rex('__[\\w_]+\\s+[\\w_0-9]+').isindexed)
      assert.is_nil(rex('').isindexed)
    end)
    it('named', function()
      assert.is_true(rex('^(?<first>__[\\w_]+)\\s*(?<last>[a-z0-9]+)?').isnamed)
      assert.is_nil(rex('__[\\w_]+\\s+[\\w_0-9]+').isnamed)
      assert.is_nil(rex('').isnamed)
    end)
    it('whole', function()
      assert.is_true(rex('^__[\\w_]+\\s+[\\w_0-9]+$').iswhole)
      assert.is_nil(rex('^__[\\w_]+\\s+[\\w_0-9]+').iswhole)
      assert.is_nil(rex('__[\\w_]+\\s+[\\w_0-9]+$').iswhole)
      assert.is_nil(rex('__[\\w_]+\\s+[\\w_0-9]+').iswhole)
      assert.is_nil(rex('').iswhole)
    end)
  end)
  it('match', function()
    assert.is_nil(rex('^__[\\w_]+\\s+\\w+$').match())
    assert.is_nil(rex('^__[\\w_]+\\s+\\w+$').match(''))
    assert.equal('__call name', rex('^__[\\w_]+\\s+\\w+$').match('__call name'))
    assert.equal('__call name', rex('^(__[\\w_]+\\s+\\w+)$').match('__call name'))
    assert.equal('__call', rex.mtname.match('__call'))
  end)
  it('tfind', function()
    assert.is_nil(rex('^(__[\\w_]+\\s+\\w+)$').tfind())
    assert.is_nil(rex('^(__[\\w_]+\\s+\\w+)$').tfind(''))
    assert.same({1,11,{'__call name'}}, rex('^(__[\\w_]+\\s+\\w+)$').tfind('__call name'))
    assert.same({1,11,{}}, rex('^__[\\w_]+\\s+\\w+$').tfind('__call name'))
  end)
  it('gmatch', function()
    assert.is_function(rex.mtname.gmatch())
    assert.is_function(rex.mtname.gmatch(''))

    assert.same({}, table()..rex.mtname.gmatch())
    assert.same({}, table()..rex.mtname.gmatch(''))
    assert.same({'__index'}, table()..rex.mtname.gmatch('__index'))
    assert.same({'__index', '__call'}, table()..rex.mtname.gmatch('__index __call'))
  end)
  it('split', function()
    re = rex('\\s+')
    assert.same({}, table()..re.split())
    assert.same({''}, table()..re.split(''))
    assert.same({'__index'}, table()..re.split('__index'))
    assert.same({'', '__index'}, table()..re.split(' __index'))
    assert.same({'__index', ''}, table()..re.split('__index '))
    assert.same({'', '__index', ''}, table()..re.split(' __index '))
    assert.same({'__index', '__call'}, table()..re.split('__index __call'))
    assert.same({'__index', '__call'}, table()..re.split('__index  __call'))
  end)
  it('splitz', function()
    re = rex('\\s+')
    assert.same({}, table()..re.splitz())
    assert.same({}, table()..re.splitz(''))
    assert.same({'__index'}, table()..re.splitz('__index'))
    assert.same({'__index'}, table()..re.splitz(' __index'))
    assert.same({'__index'}, table()..re.splitz('__index '))
    assert.same({'__index'}, table()..re.splitz(' __index '))
    assert.same({'__index', '__call'}, table()..re.splitz('__index __call'))
    assert.same({'__index', '__call'}, table()..re.splitz('__index  __call'))
  end)
  describe('trim', function()
    it('ltrim', function()
      re = rex('\\s+')
      assert.is_nil(re.ltrim())
      assert.equal('', re.ltrim(''))
      assert.equal('', re.ltrim(' '))
      assert.equal('', re.ltrim('  '))
      assert.equal('a', re.ltrim('a'))
      assert.equal('a', re.ltrim(' a'))
      assert.equal('a', re.ltrim('  a'))
      assert.equal('a ', re.ltrim('a '))
      assert.equal('a  ', re.ltrim('a  '))
    end)
    it('rtrim', function()
      re = rex('\\s+')
      assert.is_nil(re.rtrim())
      assert.equal('', re.rtrim(''))
      assert.equal('', re.rtrim(' '))
      assert.equal('', re.rtrim('  '))
      assert.equal('a', re.rtrim('a'))
      assert.equal(' a', re.rtrim(' a'))
      assert.equal('  a', re.rtrim('  a'))
      assert.equal('a', re.rtrim('a '))
      assert.equal('a', re.rtrim('a  '))
    end)
    it('trim', function()
      re = rex('\\s+')
      assert.is_nil(re.trim())
      assert.equal('', re.trim(''))
      assert.equal('', re.trim(' '))
      assert.equal('', re.trim('  '))
      assert.equal('a', re.trim('a'))
      assert.equal('a', re.trim(' a'))
      assert.equal('a', re.trim('  a'))
      assert.equal('a', re.trim('a '))
      assert.equal('a', re.trim('a  '))
    end)
  end)
  it('gsub', function()
    assert.is_nil(rex.mtname.gsub())
    assert.equal('', rex.mtname.gsub(''))
    assert.equal('ok', rex.mtname.gsub('__index', 'ok'))
    assert.equal('ok ok', rex.mtname.gsub('__index __call', 'ok'))
  end)
  it('count', function()
    assert.equal(0, rex.mtname.count())
    assert.equal(0, rex.mtname.count(''))
    assert.equal(1, rex.mtname.count('__index'))
    assert.equal(2, rex.mtname.count('__index __call'))
  end)
  it('__call', function()
    assert.is_nil(rex('^(?<first>__[\\w_]+)\\s*(?<last>[a-z0-9]+)?')())
    assert.is_nil(rex('^(?<first>__[\\w_]+)\\s*(?<last>[a-z0-9]+)?')(''))
    assert.same({'__call', 'name1', first='__call', last='name1'}, rex('^(?<first>__[\\w_]+)\\s*(?<last>[a-z0-9]+)?')('__call name1'))
    assert.equal('__call name2', rex('^__[\\w_]+\\s+[\\w_0-9]+$')('__call name2'))
    assert.equal('__call name3', rex('^__[\\w_]+\\s+\\w+$')('__call name3'))
    assert.equal('__call name4', rex('__[\\w_]+\\s+\\w+')('__call name4'))
    assert.same({'__call name5'}, rex('^(__[\\w_]+\\s+\\w+)$')('__call name5'))
    assert.same({'__call', 'name6'}, rex('^(__[\\w_]+)\\s+(\\w+)$')('__call name6'))
    assert.same({'__call', 'NAME'}, rex('^(__[\\w_]+)\\s+([a-z]+)?', 'ix')('__call NAME'))
    assert.same({'__call', 'name'}, rex('^(__[\\w_]+)\\s+([a-z]+)?', 'ix')('__call name'))
    assert.equal('__index', rex.mtname('__index'))
  end)
  it("__mod/__mul", function()
    assert.equal(table('__index'), table('__index')*rex.mtname)
    assert.equal(table('__index'), table('__index')%rex.mtname)
  end)
--  it('flags', function()
--    local flags = {}
--    lib.flags(flags)
--    assert.equal(8, flags.CASELESS)
--  end)
end)