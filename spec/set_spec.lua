describe("set", function()
  local t, set
  setup(function()
    t = require "t"
    set = t.set
  end)
  it("__add + __sub", function()
--print(inspect(set))
--print(inspect(set('a', 'b', 'c')))
--print(inspect(set('a', 'b', 'c')-'a'))
    assert.same(set('b') + 'c', set('a', 'b', 'c')-'a')
  end)
  it("__pairs", function()
--    assert.same(set('b') + 'c',
--    assert.is_function(pairs(set('a', 'b', 'c')))
    assert.equal(set(table.map(pairs(set('a', 'b', 'c')))), set('a', 'b', 'c'))
  end)
  it("create", function()
    assert.is_table(set())
    assert.is_table(set({}))
    assert.same(set(), set({}))

    assert.equal(set(table.map(pairs(set('a', 'b', 'c')))), set('a', 'b', 'c'))

    assert.is_function(t.fn.noop)
    assert.equal(getmetatable(set).__item, t.fn.noop)
    assert.equal('a', set('a')['a'])
    assert.is_table(set('a', 'b'))
  end)
  it("of", function()
    local nums = set:of(tonumber)
    assert.is_table(nums)
    assert.equal(nums(1, 7, 88, 1), nums('1', '7', '88'))
  end)
  it("compare", function()
    assert.is_true(set('a', 'b', 'c') <= set('a', 'b', 'c', 'd'))
    assert.is_true(set('a', 'd', 'b', 'c') <= set('a', 'b', 'c', 'd'))
    assert.is_true(set('a', 'd', 'b', 'c') == set('a', 'b', 'c', 'd'))
  end)
end)
