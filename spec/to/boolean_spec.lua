describe("to.boolean", function()
  local t, is, to
  setup(function()
    t = require "t"
    is, to = t.is, t.to
  end)
  it("meta", function()
    assert.is_true(is.callable(to.boolean))
  end)
  it("positive", function()
    assert.is_true(to.boolean(1))
    assert.is_true(to.boolean(7))
    assert.is_true(to.boolean(-1))
    assert.is_true(to.boolean(-7))
    assert.is_true(to.boolean('any'))
    assert.is_true(to.boolean('true'))
    assert.is_true(to.boolean('TRUE'))
    assert.is_true(to.boolean(true))
    assert.is_true(to.boolean({x=1}))
    assert.is_true(to.boolean({{}}))
  end)
  it("negative", function()
    assert.is_false(to.boolean(0), '0')
    assert.is_false(to.boolean(""), '""')
    assert.is_false(to.boolean(' '))
    assert.is_false(to.boolean('  '))
    assert.is_false(to.boolean('	'))
    assert.is_false(to.boolean('		'))
    assert.is_false(to.boolean("	\r 	"))
    assert.is_false(to.boolean("	\n 	"))
    assert.is_false(to.boolean(false), 'false')
    assert.is_false(to.boolean({}), '{}')
    assert.is_false(to.boolean("false"), '"false"')
    assert.is_false(to.boolean("0"), '"0"')
    assert.is_false(to.boolean("FALSE"), '"FALSE"')
  end)
  it("nil", function()
    assert.is_false(to.boolean(nil), 'nil')
    assert.is_false(to.boolean(), 'no arg')
  end)
end)